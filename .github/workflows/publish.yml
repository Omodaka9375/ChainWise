name: Publish to NPM

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      publish_npm:
        description: 'Publish to NPM'
        required: true
        default: true
        type: boolean

jobs:
  verify:
    name: Verify Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify build exists
        run: |
          if [ ! -f "dist/chainwise.min.js" ]; then
            echo "‚ùå chainwise.min.js not found in dist/"
            exit 1
          fi
          echo "‚úÖ chainwise.min.js found"

      - name: Verify build integrity
        run: node scripts/verify-build.js

      - name: Test library loading
        run: node scripts/test-library.js

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: verify
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Version bump (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from tag (release)
        if: github.event_name == 'release'
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
          npm version $VERSION --no-git-tag-version

      - name: Update package.json version
        run: |
          echo "Publishing version: $NEW_VERSION"
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${{ env.NEW_VERSION }}';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Verify package contents
        run: |
          echo "üì¶ Package contents:"
          npm pack --dry-run

      - name: Publish to NPM (Latest)
        if: github.event.inputs.publish_beta != 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM (Beta)
        if: github.event.inputs.publish_beta == 'true'
        run: npm publish --tag beta --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag "v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: ChainWise v${{ env.NEW_VERSION }}
          body: |
            ## ChainWise v${{ env.NEW_VERSION }}
            
            Universal Multi-Blockchain HD Wallet Library
            
            ### üì¶ Installation
            ```bash
            npm install chainwise@${{ env.NEW_VERSION }}
            ```
            
            ### üîó CDN Links
            ```html
            <!-- Production -->
            <script src="https://cdn.jsdelivr.net/npm/chainwise@${{ env.NEW_VERSION }}/dist/chainwise.min.js"></script>
            
            <!-- Development -->
            <script src="https://unpkg.com/chainwise@${{ env.NEW_VERSION }}/dist/chainwise.min.js"></script>
            ```
            
            ### üåê Supported Networks
            - Bitcoin, Ethereum, Solana, Cardano, Polkadot
            - Kusama, Avalanche, Binance Smart Chain, Polygon
            - Cosmos, NEAR, Tron, Algorand, Stellar
            - Ripple, Litecoin, Filecoin, Nostr
            
            ### üöÄ Features
            - HD Wallet with BIP32/BIP44 support
            - Multi-curve cryptography (secp256k1, ed25519, sr25519)
            - Web Workers for performance
            - AES-256-GCM encryption
            - IndexedDB storage
            - Responsive themes
            
            **Full changelog:** https://github.com/yourusername/chainwise/compare/v${{ env.PREVIOUS_VERSION }}...v${{ env.NEW_VERSION }}
          files: |
            dist/chainwise.min.js
            dist/chainwise.d.ts
          draft: false
          prerelease: ${{ github.event.inputs.publish_beta == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CDN cache
        run: |
          echo "üîÑ Purging CDN caches..."
          curl -X POST "https://purge.jsdelivr.net/npm/chainwise@${{ env.NEW_VERSION }}/dist/chainwise.min.js"
          curl -X POST "https://purge.unpkg.com/chainwise@${{ env.NEW_VERSION }}/dist/chainwise.min.js"

      - name: Notify success
        run: |
          echo "‚úÖ Successfully published ChainWise v${{ env.NEW_VERSION }} to NPM"
          echo "üì¶ NPM: https://www.npmjs.com/package/chainwise"
          echo "üîó CDN: https://cdn.jsdelivr.net/npm/chainwise@${{ env.NEW_VERSION }}/dist/chainwise.min.js"